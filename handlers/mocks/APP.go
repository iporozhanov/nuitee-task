// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	handlers "nuitee-task/handlers"

	mock "github.com/stretchr/testify/mock"
)

// APP is an autogenerated mock type for the APP type
type APP struct {
	mock.Mock
}

type APP_Expecter struct {
	mock *mock.Mock
}

func (_m *APP) EXPECT() *APP_Expecter {
	return &APP_Expecter{mock: &_m.Mock}
}

// GetHotels provides a mock function with given fields: _a0
func (_m *APP) GetHotels(_a0 *handlers.GetHotelsRequest) (*handlers.GetHotelsResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetHotels")
	}

	var r0 *handlers.GetHotelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*handlers.GetHotelsRequest) (*handlers.GetHotelsResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*handlers.GetHotelsRequest) *handlers.GetHotelsResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*handlers.GetHotelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*handlers.GetHotelsRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// APP_GetHotels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHotels'
type APP_GetHotels_Call struct {
	*mock.Call
}

// GetHotels is a helper method to define mock.On call
//   - _a0 *handlers.GetHotelsRequest
func (_e *APP_Expecter) GetHotels(_a0 interface{}) *APP_GetHotels_Call {
	return &APP_GetHotels_Call{Call: _e.mock.On("GetHotels", _a0)}
}

func (_c *APP_GetHotels_Call) Run(run func(_a0 *handlers.GetHotelsRequest)) *APP_GetHotels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*handlers.GetHotelsRequest))
	})
	return _c
}

func (_c *APP_GetHotels_Call) Return(_a0 *handlers.GetHotelsResponse, _a1 error) *APP_GetHotels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *APP_GetHotels_Call) RunAndReturn(run func(*handlers.GetHotelsRequest) (*handlers.GetHotelsResponse, error)) *APP_GetHotels_Call {
	_c.Call.Return(run)
	return _c
}

// NewAPP creates a new instance of APP. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPP(t interface {
	mock.TestingT
	Cleanup(func())
}) *APP {
	mock := &APP{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
